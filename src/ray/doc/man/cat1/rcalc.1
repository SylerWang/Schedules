RCALC(1)                                                              RCALC(1)



NNAAMMEE
       rcalc - record calculator

SSYYNNOOPPSSIISS
       rrccaallcc [ --bb ][ --ll ][ --pp ][ --nn ][ --ww ][ --uu ][ --ttSS ][ --ii ffoorrmmaatt ][ --oo ffoorr--
       mmaatt ][ --ff ssoouurrccee ][ --ee eexxpprr ][ --ss ssvvaarr==ssvvaall ] file ..

DDEESSCCRRIIPPTTIIOONN
       _R_c_a_l_c transforms ``records'' from each _f_i_l_e according to the given  set
       of  literal  and relational information.  By default, records are sepa-
       rated by newlines, and contain numeric fields separated by  tabs.   The
       _-_t_S option is used to specify an alternate tab character.

       A  _-_i  _f_o_r_m_a_t option specifies a template for an alternate input record
       format.  _F_o_r_m_a_t is interpreted as a specification string if it contains
       a  dollar  sign  '$'.   Otherwise, it is interpreted as the name of the
       file containing the format specification.  In either case, if the  for-
       mat  does  not  end with a newline, one will be added automatically.  A
       special form of the _-_i option may be followed immediately by a  'd'  or
       an  'f' and an optional count, which defaults to 1, indicating the num-
       ber of double or float binary values to read per record  on  the  input
       file.  If the input is byte-swapped, the _-_i_D or _-_i_F options may be sub-
       stituted.  If binary input is specified, no format string  or  file  is
       needed.

       A  _-_o _f_o_r_m_a_t option specifies an alternate output record format.  It is
       interpreted the same as an input specification, except that the special
       _-_o_d  or  _-_o_f options do not require a count, as this will be determined
       by the number of output channels in the given  expressions.   If  byte-
       swapped output is desired, the _-_o_D or _-_o_F options may be substituted.

       The  _-_p  option  specifies "passive mode," where characters that do not
       match the input format are passed unaltered to the output.  This option
       has no effect unless _-_i is also specified, and does not make much sense
       unless _-_o is also given.  With both input and output formats, the  pas-
       sive  mode  can  effectively  substitute information in the middle of a
       file or stream without affecting the rest of the data.

       The variable and function definitions in each _-_f _s_o_u_r_c_e file  are  read
       and  compiled.   The  _-_e _e_x_p_r option can be used to define variables on
       the command line.  Since many of the characters in an  expression  have
       special  meaning  to the shell, it should usually be enclosed in single
       quotes.  The _-_s _s_v_a_r_=_s_v_a_l option can be used to assign a  string  vari-
       able  a string value.  If this string variable appears in an input for-
       mat, only records with the specified value will be processed.

       The _-_b option instructs the program to accept only exact  matches.   By
       default,  tabs  and spaces are ignored except as field separators.  The
       _-_l option instructs the program to ignore newlines in the input,  basi-
       cally  treating them the same as tabs and spaces.  Normally, the begin-
       ning of the input format matches the beginning of a line, and  the  end
       of the format matches the end of a line.  With the _-_l option, the input
       format can match anywhere on a line.

       The _-_w option causes non-fatal error  messages  (such  as  division  by
       zero) to be supressed.  The _-_u option causes output to be flushed after
       each record.  The _-_n option tells the program not to get any input, but
       to  produce  a single output record.  Otherwise, if no files are given,
       the standard input is read.

       Format files associate names with string and numeric  fields  separated
       by literal information in a record.  A numeric field is given in a for-
       mat file as a dollar sign, followed by curly braces enclosing  a  vari-
       able name:

            This is a numeric field: ${vname}

       A string variable is enclosed in parentheses:

            This is a string field: $(sname)

       The  program  attempts to match literal information in the input format
       to its input and assign string and numeric fields  accordingly.   If  a
       string  or  numeric  field variable appears more than once in the input
       format, input values for the corresponding fields must match (ie.  have
       the  same  value)  for  the  whole record to match.  Numeric values are
       allowed some deviation, on the order of 0.1%, but string variables must
       match exactly.  Thus, dummy variables for "don't care" fields should be
       given unique names so that they are not all required  to  take  on  the
       same value.

       For each valid input record, an output record is produced in its corre-
       sponding format.  Output field widths are given implicitly by the space
       occupied  in  the  format  file,  including the dollar sign and braces.
       This makes it impossible to produce fields with fewer than four charac-
       ters.   If the _-_b option is specified, input records must exactly match
       the template.  By default, the character following each input field  is
       used as a delimiter.  This implies that string fields that are followed
       by white space cannot contain strings with white space.  Also,  numeric
       fields followed but not preceded by white space will not accept numbers
       preceded by white space.  Adjacent input fields are advisable only with
       the  _-_b  option.  Numeric output fields may contain expressions as well
       as variables.  A dollar sign may appear in  a  literal  as  two  dollar
       signs ($$).

       The  definitions  specified  in _-_e and _-_f options relate numeric output
       fields to numeric input fields.  For the default record format, a field
       is  a  variable of the form $N, where N is the column number, beginning
       with 1.  Output columns appear on the left-hand  side  of  assignments,
       input columns appear on the right-hand side.

       A variable definition has the form:


            var = expression ;


       Any instance of the variable in an expression will be replaced with its
       definition.

       An expression contains real numbers, variable  names,  function  calls,
       and the following operators:

            +  -  *  /  ^

       Operators  are evaluated left to right.  Powers have the highest prece-
       dence; multiplication and division are evaluated  before  addition  and
       subtraction.   Expressions can be grouped with parentheses.  All values
       are double precision real.

       A function definition has the form:


            func(a1, a2, ..) = expression ;


       The expression can contain instances of the function arguments as  well
       as  other  variables  and  functions.   Function names can be passed as
       arguments.  Recursive functions can  be  defined  using  calls  to  the
       defined function or other functions calling the defined function.

       The variable _c_o_n_d_, if defined, will determine whether the current input
       record produces an output record.  If _c_o_n_d is positive, output is  pro-
       duced.   If  _c_o_n_d  is less than or equal to zero, the record is skipped
       and no other expressions are evaluated.   This  provides  a  convenient
       method  for avoiding inappropriate calculations.  The following library
       of pre-defined functions and variables is provided:

       iinn((nn))     Return the value for input column _n_, or the number of columns
                 available in this record if _n is 0.  This is an alternate way
                 to get a column value instead of using the $N  notation,  and
                 is  more flexible since it is programmable.  This function is
                 disabled if an input format is used.

       iiff((ccoonndd,, tthheenn,, eellssee))
                 if cond is greater than zero, then  is  evaluated,  otherwise
                 else  is evaluated.  This function is necessary for recursive
                 definitions.

       sseelleecctt((NN,, aa11,, aa22,, ....))
                 return aN (N is rounded to the nearest integer).  This  func-
                 tion  provides  array capabilities.  If _N is zero, the number
                 of available arguments is returned.

       rraanndd((xx))   compute a random number between 0 and 1 based on x.

       fflloooorr((xx))  return largest integer not greater than x.

       cceeiill((xx))   return smallest integer not less than x.

       ssqqrrtt((xx))   return square root of x.

       eexxpp((xx))    compute e to the power of x (e approx = 2.718281828).

       lloogg((xx))    compute the logarithm of x to the base e.

       lloogg1100((xx))  compute the logarithm of x to the base 10.

       PPII        the ratio of a circle's circumference to its diameter.

       rreeccnnoo     the number of records recognized thus far.

       oouuttnnoo     the number or records output thus far (including this one).

       ssiinn((xx)),, ccooss((xx)),, ttaann((xx))
                 trigonometric functions.

       aassiinn((xx)),, aaccooss((xx)),, aattaann((xx))
                 inverse trigonometric functions.

       aattaann22((yy,, xx))
                 inverse tangent of y/x (range -pi to pi).

EEXXAAMMPPLLEE
       To print the square root of column two in column one,  and  column  one
       times column three in column two:

         rcalc -e '$1=sqrt($2);$2=$1*$3' inputfile > outputfile

AAUUTTHHOORR
       Greg Ward

BBUUGGSS
       String  variables  can  only be used in input and output formats and _-_s
       options, not in definitions.

       Tabs count as single spaces inside fields.

SSEEEE AALLSSOO
       cnt(1), ev(1), getinfo(1), icalc(1), rlam(1), tabfunc(1), total(1)



RADIANCE                            4/6/99                            RCALC(1)
